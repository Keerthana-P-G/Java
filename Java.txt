// to find a subsequence of nums of length k that has the largest sum.

import java.util.*;
public class Main
{
    public static int[] maxsub(int[] arr,int num)
    {
        int n=arr.length;
        int[][] indnum=new int[n][2];
        for(int i=0;i<n;i++)
        {
            indnum[i][0]=arr[i];
            indnum[i][1]=i;
        }
        Arrays.sort(indnum,(a,b)->b[0]-a[0]);
        int sel[][]=Arrays.copyOfRange(indnum,0,num);
        Arrays.sort(sel,Comparator.comparingInt(a->a[1]));
        int res[]=new int[num];
        for(int i=0;i<num;i++)
        {
            res[i]=sel[i][0];
        }
        return res;
    }
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=k.nextInt();
        }
        int num=k.nextInt();
        int res[]=maxsub(arr,num);
        for(int i:res)
        System.out.print(i+" ");
    }
}


//﻿Given an array of even number of elements, form groups of 2 using these array elements such that the difference between the group with the highest sum and the one with the lowest sum is minimum. 


import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=k.nextInt();
        }
        Arrays.sort(arr);
        int minsum=Integer.MAX_VALUE;
        int maxsum=Integer.MIN_VALUE;
        for(int i=0;i<n/2;i++)
        {
            int ps=arr[i]+arr[n-1-i];
            minsum=Math.min(minsum,ps);
            maxsum=Math.max(maxsum,ps);
        }
        System.out.println(maxsum-minsum);
    }
}

// Problem 3

import java.util.*;
public class Main
{
    private static int digs(int num)
    { 
        int sum=0;
        while(num>0)
        {
            sum+=num%10;
            num/=10;
        }
        return sum;
    }
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=k.nextInt();
        }
        StringBuilder res=new StringBuilder();
        for(int num:arr)
        {
            if(digs(num)%2!=0)
            res.append(num).append(" ");
        }
        if(res.length()>0)
        System.out.println(res.toString().trim());
        else
        System.out.println("");
    }
}

//Problem 4

// You are using Java
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        int c=0;
        Map<Integer,Integer> rotmap=new HashMap<>();
        rotmap.put(0,0);
        rotmap.put(1,1);
        rotmap.put(6,9);
        rotmap.put(8,8);
        rotmap.put(9,6);
        Queue<Long> q=new LinkedList<>();
        q.add(0L);
        while(!q.isEmpty())
        {
            long num=q.poll();
            if(num>n) continue;
            
            long org=num,rot=0;
            while(org>0)
            {
                int dig=(int)(org%10);
                rot=rot*10+rotmap.get(dig);
                org/=10;
            }
            if(rot!=num && num!=0)
            c++;
            
            for(int d:rotmap.keySet())
            {
                long newn=num*10+d;
                if(newn>0 && newn<=n)
                q.add(newn);
            }
        }
        System.out.println(c);
    }
}

//Problem 5

Given a sorted integer array Arr[ ] of size N, and three integers A, B, and C. The task is to find a new array  where ith element of the new array = A * Arr[i] * Arr[i] + B * Arr[i] + C where A ≠ 0. You have to print the new array in sorted (ascending) order.

import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        if(n<1 || n>10)
        {
            System.out.println("Array after sorting is: ");
            return;
        }
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=k.nextInt();
        }
        int a=k.nextInt();
        int b=k.nextInt();
        int c=k.nextInt();
        for(int i=0;i<n;i++)
        {
            arr[i]=a*arr[i]*arr[i]+b*arr[i]+c;
        }
        Arrays.sort(arr);
        System.out.print("Array after sorting is: ");
        for(int i=0;i<n;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    
}


//Problem 6

// You are using Java
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner k=new Scanner(System.in);
        int n=k.nextInt();
        int m=k.nextInt();
        int t[][]=new int[m][3];
        for(int i=0;i<m;i++)
        {
            t[i][0]=k.nextInt();
            t[i][1]=k.nextInt();
            t[i][2]=k.nextInt();
        }
        Arrays.sort(t,Comparator.comparingInt(o->o[1]));
        HashMap<Integer,Integer> p=new HashMap<>();
        int c=0;
        for(int[] tr:t)
        {
            int arr=tr[0];
            int dep=tr[1];
            int pl=tr[2];
            if(!p.containsKey(pl) || arr>=p.get(pl))
            {
                p.put(pl,dep);
                c++;
            }
        }
        System.out.println(c);
    }
}


